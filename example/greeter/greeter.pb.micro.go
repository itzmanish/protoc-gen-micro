// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: example/greeter/greeter.proto

package greeter

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/itzmanish/go-micro/v2/api"
	client "github.com/itzmanish/go-micro/v2/client"
	server "github.com/itzmanish/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Greeter service

func NewGreeterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Greeter service

type GreeterService interface {
	Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Greeter_ClientStreamService, error)
	ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Greeter_ServerStreamService, error)
	Stream(ctx context.Context, opts ...client.CallOption) (Greeter_StreamService, error)
}

type greeterService struct {
	c    client.Client
	name string
}

func NewGreeterService(name string, c client.Client) GreeterService {
	return &greeterService{
		c:    c,
		name: name,
	}
}

func (c *greeterService) Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Greeter.Hello", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterService) ClientStream(ctx context.Context, opts ...client.CallOption) (Greeter_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Greeter.ClientStream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &greeterServiceClientStream{stream}, nil
}

type Greeter_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*Response, error)
	Send(*Request) error
}

type greeterServiceClientStream struct {
	stream client.Stream
}

func (x *greeterServiceClientStream) CloseAndRecv() (*Response, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(Response)
	err := x.RecvMsg(r)
	return r, err
}

func (x *greeterServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *greeterServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterServiceClientStream) Send(m *Request) error {
	return x.stream.Send(m)
}

func (c *greeterService) ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Greeter_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Greeter.ServerStream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &greeterServiceServerStream{stream}, nil
}

type Greeter_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Response, error)
}

type greeterServiceServerStream struct {
	stream client.Stream
}

func (x *greeterServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *greeterServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *greeterServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterServiceServerStream) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterService) Stream(ctx context.Context, opts ...client.CallOption) (Greeter_StreamService, error) {
	req := c.c.NewRequest(c.name, "Greeter.Stream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &greeterServiceStream{stream}, nil
}

type Greeter_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Request) error
	Recv() (*Response, error)
}

type greeterServiceStream struct {
	stream client.Stream
}

func (x *greeterServiceStream) Close() error {
	return x.stream.Close()
}

func (x *greeterServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *greeterServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterServiceStream) Send(m *Request) error {
	return x.stream.Send(m)
}

func (x *greeterServiceStream) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterHandler interface {
	Hello(context.Context, *Request, *Response) error
	ClientStream(context.Context, Greeter_ClientStreamStream) error
	ServerStream(context.Context, *Request, Greeter_ServerStreamStream) error
	Stream(context.Context, Greeter_StreamStream) error
}

func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler, opts ...server.HandlerOption) error {
	type greeter interface {
		Hello(ctx context.Context, in *Request, out *Response) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		Stream(ctx context.Context, stream server.Stream) error
	}
	type Greeter struct {
		greeter
	}
	h := &greeterHandler{hdlr}
	return s.Handle(s.NewHandler(&Greeter{h}, opts...))
}

type greeterHandler struct {
	GreeterHandler
}

func (h *greeterHandler) Hello(ctx context.Context, in *Request, out *Response) error {
	return h.GreeterHandler.Hello(ctx, in, out)
}

func (h *greeterHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.GreeterHandler.ClientStream(ctx, &greeterClientStreamStream{stream})
}

type Greeter_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*Response) error
	Recv() (*Request, error)
}

type greeterClientStreamStream struct {
	stream server.Stream
}

func (x *greeterClientStreamStream) SendAndClose(in *Response) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *greeterClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *greeterClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterClientStreamStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *greeterHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(Request)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GreeterHandler.ServerStream(ctx, m, &greeterServerStreamStream{stream})
}

type Greeter_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
}

type greeterServerStreamStream struct {
	stream server.Stream
}

func (x *greeterServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *greeterServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *greeterServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterServerStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func (h *greeterHandler) Stream(ctx context.Context, stream server.Stream) error {
	return h.GreeterHandler.Stream(ctx, &greeterStreamStream{stream})
}

type Greeter_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
	Recv() (*Request, error)
}

type greeterStreamStream struct {
	stream server.Stream
}

func (x *greeterStreamStream) Close() error {
	return x.stream.Close()
}

func (x *greeterStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *greeterStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func (x *greeterStreamStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
